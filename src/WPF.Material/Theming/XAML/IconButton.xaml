<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:assists="clr-namespace:WPF.Material.Assists"
    xmlns:controls="clr-namespace:WPF.Material.Controls"
    xmlns:typography="clr-namespace:WPF.Material.Typography">

    <Style TargetType="{x:Type controls:IconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Type" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="assists:LayoutAssist.ContainerWidth" Value="40" />
        <Setter Property="assists:LayoutAssist.ContainerHeight" Value="40" />
        <Setter Property="assists:ShapeAssist.Style" Value="Full" />
        <Setter Property="assists:IconAssist.Size" Value="24" />
        <Setter Property="assists:IconAssist.Icon" Value="Add" />
        <Setter Property="assists:TypographyAssist.Style" Value="{typography:TypeStyle Style=LabelLarge, Height=0, Size=24}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconButton}">
                    <controls:Container
                        x:Name="Container"
                        Width="{TemplateBinding assists:LayoutAssist.ContainerWidth}"
                        Height="{TemplateBinding assists:LayoutAssist.ContainerHeight}"
                        assists:InteractionAssist.IsDragged="{TemplateBinding assists:InteractionAssist.IsDragged}"
                        assists:InteractionAssist.IsEnabled="{TemplateBinding IsEnabled}"
                        assists:InteractionAssist.IsHovered="{TemplateBinding IsMouseOver}"
                        assists:InteractionAssist.IsPressed="{TemplateBinding IsPressed}"
                        assists:InteractionAssist.IsRippleEnabled="True"
                        assists:ShapeAssist.Corner="{TemplateBinding assists:ShapeAssist.Corner}"
                        assists:ShapeAssist.Family="{TemplateBinding assists:ShapeAssist.Family}"
                        assists:ShapeAssist.Radius="{TemplateBinding assists:ShapeAssist.Radius}"
                        assists:ShapeAssist.Style="{TemplateBinding assists:ShapeAssist.Style}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Foreground="{TemplateBinding Foreground}">

                        <controls:SymbolIcon
                            x:Name="Icon"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontSize="{TemplateBinding assists:IconAssist.Size}"
                            FontWeight="{TemplateBinding assists:IconAssist.Weight}"
                            Foreground="{TemplateBinding Foreground}"
                            IsFilled="{TemplateBinding assists:IconAssist.Fill}"
                            Symbol="{TemplateBinding assists:IconAssist.Icon}"
                            SymbolStyle="{TemplateBinding assists:IconAssist.Style}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextBlock.TextAlignment="Center" />
                    </controls:Container>

                    <ControlTemplate.Triggers>
                        <!--  Icon  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(assists:IconAssist.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(assists:IconAssist.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(assists:IconAssist.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(assists:IconAssist.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(assists:IconAssist.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(assists:IconAssist.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Standard  -->
            <Trigger Property="Type" Value="Standard">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <!--  Filled  -->
            <Trigger Property="Type" Value="Filled">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
            </Trigger>

            <!--  Tonal  -->
            <Trigger Property="Type" Value="Tonal">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <!--  Outlined  -->
            <Trigger Property="Type" Value="Outlined">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Filled" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Tonal" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Outlined" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type controls:ToggleIconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Type" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
        <Setter Property="IsThreeState" Value="False" />
        <Setter Property="IsChecked" Value="False" />
        <Setter Property="assists:IconAssist.Icon" Value="Add" />
        <Setter Property="assists:IconAssist.Size" Value="24" />
        <Setter Property="assists:ShapeAssist.Style" Value="Full" />
        <Setter Property="assists:LayoutAssist.ContainerWidth" Value="40" />
        <Setter Property="assists:LayoutAssist.ContainerHeight" Value="40" />
        <Setter Property="assists:TypographyAssist.Style" Value="{typography:TypeStyle Style=LabelLarge, Height=0, Size=24}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ToggleIconButton}">
                    <controls:Container
                        x:Name="Container"
                        Width="{TemplateBinding assists:LayoutAssist.ContainerWidth}"
                        Height="{TemplateBinding assists:LayoutAssist.ContainerHeight}"
                        assists:InteractionAssist.IsDragged="{TemplateBinding assists:InteractionAssist.IsDragged}"
                        assists:InteractionAssist.IsEnabled="{TemplateBinding IsEnabled}"
                        assists:InteractionAssist.IsHovered="{TemplateBinding IsMouseOver}"
                        assists:InteractionAssist.IsPressed="{TemplateBinding IsPressed}"
                        assists:InteractionAssist.IsRippleEnabled="True"
                        assists:ShapeAssist.Corner="{TemplateBinding assists:ShapeAssist.Corner}"
                        assists:ShapeAssist.Family="{TemplateBinding assists:ShapeAssist.Family}"
                        assists:ShapeAssist.Radius="{TemplateBinding assists:ShapeAssist.Radius}"
                        assists:ShapeAssist.Style="{TemplateBinding assists:ShapeAssist.Style}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Foreground="{TemplateBinding Foreground}">

                        <controls:SymbolIcon
                            x:Name="Icon"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontSize="{TemplateBinding assists:IconAssist.Size}"
                            FontWeight="{TemplateBinding assists:IconAssist.Weight}"
                            Foreground="{TemplateBinding Foreground}"
                            IsFilled="{TemplateBinding assists:IconAssist.Fill}"
                            Symbol="{TemplateBinding assists:IconAssist.Icon}"
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            TextBlock.TextAlignment="Center" />
                    </controls:Container>

                    <ControlTemplate.Triggers>
                        <!--  Icon  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(assists:IconAssist.IconOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(assists:IconAssist.FillOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(assists:IconAssist.WeightOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(assists:IconAssist.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(assists:IconAssist.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(assists:IconAssist.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(assists:IconAssist.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Checked  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Standard" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Filled" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Tonal" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Outlined" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.InverseSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.InverseOnSurface}" />
            </MultiTrigger>

            <!--  Unchecked  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Standard" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Filled" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHighest}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Tonal" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHighest}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Outlined" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
                <Setter Property="BorderThickness" Value="1" />
            </MultiTrigger>

            <!--  Disabled  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Filled" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Tonal" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Outlined" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Type" Value="Outlined" />
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>