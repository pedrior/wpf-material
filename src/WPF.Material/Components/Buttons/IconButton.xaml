<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:WPF.Material.Components"
    xmlns:foundations="clr-namespace:WPF.Material.Foundations"
    xmlns:styles="clr-namespace:WPF.Material.Styles">

    <Style TargetType="{x:Type components:IconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Type" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="foundations:Layout.InnerWidth" Value="40" />
        <Setter Property="foundations:Layout.InnerHeight" Value="40" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="foundations:Icon.Size" Value="24" />
        <Setter Property="foundations:Icon.Icon" Value="Add" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:IconButton}">
                    <components:Ripple
                        Width="{TemplateBinding foundations:Layout.InnerWidth}"
                        Height="{TemplateBinding foundations:Layout.InnerHeight}"
                        Foreground="{TemplateBinding Foreground}"
                        RippleOutline="{Binding ElementName=Container, Path=RenderedGeometry}">

                        <components:Container
                            x:Name="Container"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            foundations:Interaction.IsDragged="{TemplateBinding foundations:Interaction.IsDragged}"
                            foundations:Interaction.IsFocused="{TemplateBinding IsKeyboardFocused}"
                            foundations:Interaction.IsHovered="{TemplateBinding IsMouseOver}"
                            foundations:Interaction.IsPressed="{TemplateBinding IsPressed}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Foreground="{TemplateBinding Foreground}">

                            <components:SymbolIcon
                                x:Name="Icon"
                                Width="{TemplateBinding foundations:Icon.Size}"
                                Height="{TemplateBinding foundations:Icon.Size}"
                                Brush="{TemplateBinding Foreground}"
                                IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                Symbol="{TemplateBinding foundations:Icon.Icon}"
                                Type="{TemplateBinding foundations:Icon.Style}"
                                Weight="{TemplateBinding foundations:Icon.Weight}" />
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <Trigger Property="foundations:Interaction.IsHovered" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Weight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <Trigger Property="foundations:Interaction.IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Weight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Type" Value="Standard">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <Trigger Property="Type" Value="Filled">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
            </Trigger>

            <Trigger Property="Type" Value="Tonal">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <Trigger Property="Type" Value="Outlined">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Filled" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Tonal" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Type" Value="Outlined" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>