<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="clr-namespace:WPF.Material.Common"
    xmlns:components="clr-namespace:WPF.Material.Components"
    xmlns:foundations="clr-namespace:WPF.Material.Foundations"
    xmlns:styles="clr-namespace:WPF.Material.Styles">

    <Style TargetType="{x:Type components:Button}">
        <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Appearance" Value="Filled" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="16,0,24,0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:Button}">
                    <components:Ripple ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}" Foreground="{TemplateBinding Foreground}">
                        <components:Container
                            x:Name="Container"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SpacedPanel
                                x:Name="Panel"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Spacing="8">

                                <components:SymbolIcon
                                    x:Name="Icon"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="23"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    FontSize="18"
                                    FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    SymbolStyle="{TemplateBinding foundations:Icon.Style}"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center" />

                                <ContentPresenter
                                    x:Name="Label"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="20"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    Content="{TemplateBinding Content}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    RecognizesAccessKey="True"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <!--  Tonal  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Appearance" Value="Tonal" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level1" />
                        </MultiTrigger>

                        <!--  Elevated  -->
                        <Trigger Property="Appearance" Value="Elevated">
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Appearance" Value="Elevated" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level2" />
                        </MultiTrigger>

                        <!--  Content  -->
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Panel" Property="Margin" Value="24,0" />
                            <Setter TargetName="Icon" Property="Margin" Value="0" />
                            <Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <!--  Icon  -->
                        <Trigger Property="foundations:Icon.Icon" Value="{x:Null}">
                            <Setter TargetName="Panel" Property="Margin" Value="24,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Elevated  -->
            <Trigger Property="Appearance" Value="Elevated">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerLow}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <!--  Tonal  -->
            <Trigger Property="Appearance" Value="Tonal">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <!--  Outlined  -->
            <Trigger Property="Appearance" Value="Outlined">
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>

            <!--  Text  -->
            <Trigger Property="Appearance" Value="Text">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>

            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Filled" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Tonal" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Elevated" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Outlined" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:FloatingActionButton}">
        <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHigh}" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Size" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="IsExtended" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Appearance" Value="Surface" />
        <Setter Property="styles:Shape.Style" Value="Large" />
        <Setter Property="foundations:Icon.Size" Value="24" />
        <Setter Property="foundations:Icon.Icon" Value="Add" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:FloatingActionButton}">
                    <components:Ripple ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}" Foreground="{TemplateBinding Foreground}">
                        <components:Container
                            x:Name="Container"
                            styles:Elevation.Level="Level3"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SpacedPanel
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Spacing="8">

                                <components:SymbolIcon
                                    x:Name="Icon"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="23"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    FontSize="18"
                                    FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    SymbolStyle="{TemplateBinding foundations:Icon.Style}"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center" />

                                <ContentPresenter
                                    x:Name="Label"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="20"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    Content="{TemplateBinding Content}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    RecognizesAccessKey="True"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center"
                                    Visibility="Collapsed" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <!--  Elevation  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level4" />
                        </Trigger>

                        <!--  Extended  -->
                        <Trigger Property="IsExtended" Value="True">
                            <Setter TargetName="Label" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExtended" Value="True" />
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <!--  Icon  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Appearance  -->
            <Trigger Property="Appearance" Value="Primary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.PrimaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimaryContainer}" />
            </Trigger>
            <Trigger Property="Appearance" Value="Secondary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>
            <Trigger Property="Appearance" Value="Tertiary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.TertiaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnTertiaryContainer}" />
            </Trigger>

            <!--  Extended  -->
            <Trigger Property="IsExtended" Value="True">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="Height" Value="56" />
                <Setter Property="styles:Shape.Style" Value="Large" />
            </Trigger>

            <!--  Size  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Small" />
                    <Condition Property="IsExtended" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Width" Value="40" />
                <Setter Property="Height" Value="40" />
                <Setter Property="Padding" Value="8" />
                <Setter Property="styles:Shape.Style" Value="Medium" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Large" />
                    <Condition Property="IsExtended" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Width" Value="96" />
                <Setter Property="Height" Value="96" />
                <Setter Property="styles:Shape.Style" Value="ExtraLarge" />
                <Setter Property="foundations:Icon.Size" Value="36" />
            </MultiTrigger>

            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:IconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Appearance" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="foundations:Layout.ContainerWidth" Value="40" />
        <Setter Property="foundations:Layout.ContainerHeight" Value="40" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="foundations:Icon.Size" Value="24" />
        <Setter Property="foundations:Icon.Icon" Value="Add" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0, Size=24}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:IconButton}">
                    <components:Ripple
                        Width="{TemplateBinding foundations:Layout.ContainerWidth}"
                        Height="{TemplateBinding foundations:Layout.ContainerHeight}"
                        ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}"
                        Foreground="{TemplateBinding Foreground}">

                        <components:Container
                            x:Name="Container"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SymbolIcon
                                x:Name="Icon"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="{TemplateBinding foundations:Icon.Size}"
                                FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                Foreground="{TemplateBinding Foreground}"
                                IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                Symbol="{TemplateBinding foundations:Icon.Icon}"
                                SymbolStyle="{TemplateBinding foundations:Icon.Style}"
                                TextBlock.Foreground="{TemplateBinding Foreground}"
                                TextBlock.TextAlignment="Center" />
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <!--  Icon  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Standard  -->
            <Trigger Property="Appearance" Value="Standard">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <!--  Filled  -->
            <Trigger Property="Appearance" Value="Filled">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
            </Trigger>

            <!--  Tonal  -->
            <Trigger Property="Appearance" Value="Tonal">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <!--  Outlined  -->
            <Trigger Property="Appearance" Value="Outlined">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Filled" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Tonal" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="False" />
                    <Condition Property="Appearance" Value="Outlined" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:ToggleIconButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Appearance" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
        <Setter Property="IsThreeState" Value="False" />
        <Setter Property="IsChecked" Value="False" />
        <Setter Property="foundations:Icon.Icon" Value="Add" />
        <Setter Property="foundations:Icon.Size" Value="24" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="foundations:Layout.ContainerWidth" Value="40" />
        <Setter Property="foundations:Layout.ContainerHeight" Value="40" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0, Size=24}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:ToggleIconButton}">
                    <components:Ripple
                        Width="{TemplateBinding foundations:Layout.ContainerWidth}"
                        Height="{TemplateBinding foundations:Layout.ContainerHeight}"
                        ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}"
                        Foreground="{TemplateBinding Foreground}">

                        <components:Container
                            x:Name="Container"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SymbolIcon
                                x:Name="Icon"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="{TemplateBinding foundations:Icon.Size}"
                                FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                Foreground="{TemplateBinding Foreground}"
                                IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                Symbol="{TemplateBinding foundations:Icon.Icon}"
                                TextBlock.Foreground="{TemplateBinding Foreground}"
                                TextBlock.TextAlignment="Center" />
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <!--  Icon  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Checked  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Standard" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Filled" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Tonal" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Outlined" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.InverseSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.InverseOnSurface}" />
            </MultiTrigger>

            <!--  Unchecked  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Standard" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Filled" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHighest}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Tonal" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHighest}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Outlined" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurfaceVariant}" />
                <Setter Property="BorderThickness" Value="1" />
            </MultiTrigger>

            <!--  Disabled  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Filled" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Tonal" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Outlined" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Outlined" />
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="foundations:Icon.IconOnSelecting" Value="Check" />
        <Setter Property="styles:Shape.Corner" Value="All" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:ToggleButton}">
                    <components:Ripple ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}" Foreground="{TemplateBinding Foreground}">
                        <components:Container
                            x:Name="Container"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SpacedPanel
                                x:Name="Panel"
                                Margin="16,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Spacing="8">

                                <components:SymbolIcon
                                    x:Name="Icon"
                                    Block.LineHeight="23"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    FontSize="18"
                                    FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    SymbolStyle="{TemplateBinding foundations:Icon.Style}" />

                                <ContentPresenter
                                    x:Name="Label"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="20"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    Content="{TemplateBinding Content}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    RecognizesAccessKey="True"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <Trigger Property="ShowIcon" Value="False">
                            <Setter TargetName="Panel" Property="Margin" Value="16,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                                <Condition Property="ShowIcon" Value="True" />
                                <Condition Property="foundations:Icon.IconOnSelecting" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Panel" Property="Margin" Value="29,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="ShowIcon" Value="True" />
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Panel" Property="Margin" Value="29,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Checked  -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <!--  Density  -->
            <Trigger Property="foundations:Layout.Density" Value="Level0">
                <Setter Property="Height" Value="40" />
            </Trigger>
            <Trigger Property="foundations:Layout.Density" Value="Level1">
                <Setter Property="Height" Value="36" />
            </Trigger>
            <Trigger Property="foundations:Layout.Density" Value="Level2">
                <Setter Property="Height" Value="32" />
            </Trigger>
            <Trigger Property="foundations:Layout.Density" Value="Level3">
                <Setter Property="Height" Value="28" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:ToggleButtonGroup}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="IsMultiSelect" Value="False" />
        <Setter Property="RequireSelection" Value="False" />
        <Setter Property="IsUniformWidth" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Type components:ToggleButton}}" TargetType="{x:Type components:ToggleButton}">
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=Background}" />
                    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=BorderBrush}" />
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=Foreground}" />
                    <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=BorderThickness}" />
                    <Setter Property="styles:Shape.Radius" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Radius)}" />
                    <Setter Property="components:ToggleButtonGroup.GroupOrientation" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=Orientation}" />
                    <Style.Triggers>
                        <Trigger Property="components:ToggleButtonGroup.IsFirstItem" Value="True">
                            <Setter Property="styles:Shape.Style" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Style)}" />
                        </Trigger>
                        <Trigger Property="components:ToggleButtonGroup.IsLastItem" Value="True">
                            <Setter Property="styles:Shape.Style" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:ToggleButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Style)}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:ToggleButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:ToggleButtonGroup.IsLastItem" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="None" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:ToggleButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:ToggleButtonGroup.IsLastItem" Value="False" />
                                <Condition Property="components:ToggleButtonGroup.GroupOrientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopLeft, BottomLeft" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopRight, BottomRight" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:ToggleButtonGroup.IsFirstItem" Value="False" />
                                <Condition Property="components:ToggleButtonGroup.IsLastItem" Value="True" />
                                <Condition Property="components:ToggleButtonGroup.GroupOrientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopRight, BottomRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopLeft, BottomLeft" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:ToggleButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:ToggleButtonGroup.IsLastItem" Value="False" />
                                <Condition Property="components:ToggleButtonGroup.GroupOrientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopLeft, TopRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="BottomLeft, BottomRight" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:ToggleButtonGroup.IsFirstItem" Value="False" />
                                <Condition Property="components:ToggleButtonGroup.IsLastItem" Value="True" />
                                <Condition Property="components:ToggleButtonGroup.GroupOrientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="BottomLeft, BottomRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopLeft, TopRight" />
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:ToggleButtonGroup}">
                    <components:SpacedPanel
                        IsItemsHost="True"
                        ItemBorderThickness="{TemplateBinding BorderThickness,
                                                              Converter={common:ThicknessToDoubleConverter}}"
                        JoinItemBorders="True"
                        Orientation="{TemplateBinding Orientation}"
                        Spacing="{TemplateBinding Spacing}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>