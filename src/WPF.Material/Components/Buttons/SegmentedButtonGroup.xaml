<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:common="clr-namespace:WPF.Material.Common"
    xmlns:components="clr-namespace:WPF.Material.Components"
    xmlns:foundations="clr-namespace:WPF.Material.Foundations"
    xmlns:styles="clr-namespace:WPF.Material.Styles">

    <Style TargetType="{x:Type components:SegmentedButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="styles:Shape.Corner" Value="All" />
        <Setter Property="foundations:Icon.IconOnSelecting" Value="Check" />
        <Setter Property="foundations:Layout.Spacing" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:SegmentedButton}">
                    <components:Ripple Foreground="{TemplateBinding Foreground}" RippleOutline="{Binding ElementName=Container, Path=RenderedGeometry}">
                        <components:Container
                            x:Name="Container"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            foundations:Interaction.IsFocused="{TemplateBinding IsKeyboardFocused}"
                            foundations:Interaction.IsHovered="{TemplateBinding IsMouseOver}"
                            foundations:Interaction.IsPressed="{TemplateBinding IsPressed}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SpacedPanel x:Name="Panel" Spacing="{TemplateBinding foundations:Layout.Spacing}">
                                <components:SymbolIcon
                                    x:Name="Icon"
                                    Brush="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    Type="{TemplateBinding foundations:Icon.Style}"
                                    Weight="{TemplateBinding foundations:Icon.Weight}" />

                                <ContentPresenter
                                    x:Name="Label"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    RecognizesAccessKey="True"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Weight" Value="{Binding Path=(foundations:Icon.WeightOnSelecting), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="foundations:Interaction.IsHovered" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Weight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="foundations:Interaction.IsPressed" Value="True" />
                                <Condition Property="ShowIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Weight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <Trigger Property="ShowIcon" Value="False">
                            <Setter TargetName="Panel" Property="Margin" Value="16,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                                <Condition Property="ShowIcon" Value="True" />
                                <Condition Property="foundations:Icon.IconOnSelecting" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Panel" Property="Margin" Value="29,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="ShowIcon" Value="True" />
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Panel" Property="Margin" Value="29,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <Trigger Property="foundations:Layout.Density" Value="Level0">
                <Setter Property="Height" Value="40" />
            </Trigger>

            <Trigger Property="foundations:Layout.Density" Value="Level1">
                <Setter Property="Height" Value="36" />
            </Trigger>

            <Trigger Property="foundations:Layout.Density" Value="Level2">
                <Setter Property="Height" Value="32" />
            </Trigger>

            <Trigger Property="foundations:Layout.Density" Value="Level3">
                <Setter Property="Height" Value="28" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type components:SegmentedButtonGroup}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="IsMultiSelect" Value="False" />
        <Setter Property="RequireSelection" Value="False" />
        <Setter Property="IsUniformWidth" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Type components:SegmentedButton}}" TargetType="{x:Type components:SegmentedButton}">
                    <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=Background}" />
                    <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=BorderBrush}" />
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=Foreground}" />
                    <Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=BorderThickness}" />
                    <Setter Property="styles:Shape.Radius" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Radius)}" />
                    <Setter Property="components:SegmentedButtonGroup.GroupOrientation" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=Orientation}" />
                    <Style.Triggers>
                        <Trigger Property="components:SegmentedButtonGroup.IsFirstItem" Value="True">
                            <Setter Property="styles:Shape.Style" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Style)}" />
                        </Trigger>

                        <Trigger Property="components:SegmentedButtonGroup.IsLastItem" Value="True">
                            <Setter Property="styles:Shape.Style" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type components:SegmentedButtonGroup}, AncestorLevel=1}, Path=(styles:Shape.Style)}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:SegmentedButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:SegmentedButtonGroup.IsLastItem" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="None" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:SegmentedButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:SegmentedButtonGroup.IsLastItem" Value="False" />
                                <Condition Property="components:SegmentedButtonGroup.GroupOrientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopLeft, BottomLeft" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopRight, BottomRight" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:SegmentedButtonGroup.IsFirstItem" Value="False" />
                                <Condition Property="components:SegmentedButtonGroup.IsLastItem" Value="True" />
                                <Condition Property="components:SegmentedButtonGroup.GroupOrientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopRight, BottomRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopLeft, BottomLeft" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:SegmentedButtonGroup.IsFirstItem" Value="True" />
                                <Condition Property="components:SegmentedButtonGroup.IsLastItem" Value="False" />
                                <Condition Property="components:SegmentedButtonGroup.GroupOrientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="TopLeft, TopRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="BottomLeft, BottomRight" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="components:SegmentedButtonGroup.IsFirstItem" Value="False" />
                                <Condition Property="components:SegmentedButtonGroup.IsLastItem" Value="True" />
                                <Condition Property="components:SegmentedButtonGroup.GroupOrientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter Property="styles:Shape.Corner" Value="BottomLeft, BottomRight" />
                            <Setter Property="styles:Shape.UseCornersOnRadiusOverride" Value="TopLeft, TopRight" />
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:SegmentedButtonGroup}">
                    <components:SpacedPanel
                        IsItemsHost="True"
                        ItemBorderThickness="{TemplateBinding BorderThickness,
                                                              Converter={common:ThicknessToDoubleConverter}}"
                        JoinItemBorders="True"
                        Orientation="{TemplateBinding Orientation}"
                        Spacing="{TemplateBinding Spacing}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>