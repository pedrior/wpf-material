<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:WPF.Material.Components"
    xmlns:foundations="clr-namespace:WPF.Material.Foundations"
    xmlns:styles="clr-namespace:WPF.Material.Styles">

    <Style TargetType="{x:Type components:Button}">
        <Setter Property="Background" Value="{DynamicResource Material.Colors.Primary}" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimary}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Appearance" Value="Filled" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Padding" Value="16,0,24,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="styles:Shape.Style" Value="Full" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0}" />
        <Setter Property="foundations:Layout.Spacing" Value="8" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="foundations:Interaction.IsFocused" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:Button}">
                    <components:Ripple Foreground="{TemplateBinding Foreground}" RippleOutline="{Binding ElementName=Container, Path=RenderedGeometry}">
                        <components:Container
                            x:Name="Container"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Foreground="{TemplateBinding Foreground}">

                            <components:SpacedPanel Spacing="{TemplateBinding foundations:Layout.Spacing}">
                                <components:SymbolIcon
                                    x:Name="Icon"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="23"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    FontSize="18"
                                    FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    SymbolStyle="{TemplateBinding foundations:Icon.Style}" />

                                <ContentPresenter
                                    x:Name="Content"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="20"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    RecognizesAccessKey="True"
                                    TextElement.Foreground="{TemplateBinding Foreground}" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Appearance" Value="Tonal" />
                                <Condition Property="foundations:Interaction.IsHovered" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level1" />
                        </MultiTrigger>

                        <Trigger Property="Appearance" Value="Elevated">
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level1" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Appearance" Value="Elevated" />
                                <Condition Property="foundations:Interaction.IsHovered" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level2" />
                        </MultiTrigger>

                        <Trigger Property="foundations:Icon.Icon" Value="{x:Null}">
                            <Setter TargetName="Container" Property="Padding" Value="24,0" />
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="Container" Property="Padding" Value="24,0" />
                            <Setter TargetName="Content" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="foundations:Interaction.IsHovered" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <Trigger Property="foundations:Interaction.IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Appearance" Value="Elevated">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerLow}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
            </Trigger>

            <Trigger Property="Appearance" Value="Tonal">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>

            <Trigger Property="Appearance" Value="Outlined">
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.Outline}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>

            <Trigger Property="Appearance" Value="Text">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
                <Setter Property="Background" Value="Transparent" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Filled" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Tonal" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Elevated" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Appearance" Value="Outlined" />
                    <Condition Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource Material.Colors.OnSurface}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>