<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:components="clr-namespace:WPF.Material.Components"
    xmlns:foundations="clr-namespace:WPF.Material.Foundations"
    xmlns:styles="clr-namespace:WPF.Material.Styles">

    <Style TargetType="{x:Type components:FloatingActionButton}">
        <Setter Property="Background" Value="{DynamicResource Material.Colors.SurfaceContainerHigh}" />
        <Setter Property="Foreground" Value="{DynamicResource Material.Colors.Primary}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="56" />
        <Setter Property="Height" Value="56" />
        <Setter Property="Size" Value="Standard" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="IsExtended" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Appearance" Value="Surface" />
        <Setter Property="styles:Shape.Style" Value="Large" />
        <Setter Property="foundations:Icon.Size" Value="24" />
        <Setter Property="foundations:Icon.Icon" Value="Add" />
        <Setter Property="styles:Typography.Style" Value="{styles:TypeStyle Style=LabelLarge, Height=0}" />
        <Setter Property="foundations:Interaction.IsHovered" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
        <Setter Property="foundations:Interaction.IsPressed" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" />
        <Setter Property="foundations:Interaction.IsFocused" Value="{Binding RelativeSource={RelativeSource Self}, Path=IsKeyboardFocused}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type components:FloatingActionButton}">
                    <components:Ripple ClippingGeometry="{Binding ElementName=Container, Path=RenderedGeometry}" Foreground="{TemplateBinding Foreground}">
                        <components:Container
                            x:Name="Container"
                            styles:Elevation.Level="Level3"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                            <components:SpacedPanel
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Spacing="8">

                                <components:SymbolIcon
                                    x:Name="Icon"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="23"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    FontSize="18"
                                    FontWeight="{TemplateBinding foundations:Icon.Weight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsFilled="{TemplateBinding foundations:Icon.Fill}"
                                    Symbol="{TemplateBinding foundations:Icon.Icon}"
                                    SymbolStyle="{TemplateBinding foundations:Icon.Style}"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center" />

                                <ContentPresenter
                                    x:Name="Label"
                                    VerticalAlignment="Center"
                                    Block.LineHeight="20"
                                    Block.LineStackingStrategy="BlockLineHeight"
                                    Content="{TemplateBinding Content}"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    RecognizesAccessKey="True"
                                    TextBlock.Foreground="{TemplateBinding Foreground}"
                                    TextBlock.TextAlignment="Center"
                                    Visibility="Collapsed" />
                            </components:SpacedPanel>
                        </components:Container>
                    </components:Ripple>

                    <ControlTemplate.Triggers>
                        <!--  Elevation  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Container" Property="styles:Elevation.Level" Value="Level4" />
                        </Trigger>

                        <!--  Extended  -->
                        <Trigger Property="IsExtended" Value="True">
                            <Setter TargetName="Label" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExtended" Value="True" />
                                <Condition Property="foundations:Icon.Icon" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <!--  Icon  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnHovering), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Symbol" Value="{Binding Path=(foundations:Icon.IconOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="IsFilled" Value="{Binding Path=(foundations:Icon.FillOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="FontWeight" Value="{Binding Path=(foundations:Icon.WeightOnPressing), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--  Appearance  -->
            <Trigger Property="Appearance" Value="Primary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.PrimaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnPrimaryContainer}" />
            </Trigger>
            <Trigger Property="Appearance" Value="Secondary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.SecondaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSecondaryContainer}" />
            </Trigger>
            <Trigger Property="Appearance" Value="Tertiary">
                <Setter Property="Background" Value="{DynamicResource Material.Colors.TertiaryContainer}" />
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnTertiaryContainer}" />
            </Trigger>

            <!--  Extended  -->
            <Trigger Property="IsExtended" Value="True">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="Height" Value="56" />
                <Setter Property="styles:Shape.Style" Value="Large" />
            </Trigger>

            <!--  Size  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Small" />
                    <Condition Property="IsExtended" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Width" Value="40" />
                <Setter Property="Height" Value="40" />
                <Setter Property="Padding" Value="8" />
                <Setter Property="styles:Shape.Style" Value="Medium" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Size" Value="Large" />
                    <Condition Property="IsExtended" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Width" Value="96" />
                <Setter Property="Height" Value="96" />
                <Setter Property="styles:Shape.Style" Value="ExtraLarge" />
                <Setter Property="foundations:Icon.Size" Value="36" />
            </MultiTrigger>

            <!--  Disabled  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Material.Colors.OnSurface}" />
                <Setter Property="Background" Value="{DynamicResource Material.Colors.OnSurface}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>